# This file contains common pin mappings for the Fysetc CATALYST V1.0
# board. To use this config, the firmware should be compiled for the
# STM32F401 with "No bootloader" and Communication interface USB
# Set Clock Reference to ( 8  MHz crystal )

# After running "make", run the following command to flash the board:
# dfu-util -R -a 0 -s 0x08000000:leave -D out/klipper.bin

## Voron Design VORON 0.2 
## FYSETC CATALYST V1.0 config

## *** THINGS TO CHANGE/CHECK: ***
## MCU path                                                                     [mcu] section
## Z and Extruder motor currents                                                [tmc2209 stepper_*] sections. Uncomment the stepper motor you have
## Full steps per rotation for Extruder                                         [extruder] section
## Thermistor types                                                             [extruder] and [heater_bed] sections - See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types
## Extruder motor currents                                                      [extruder] section
## PID tune                                                                     [extruder] and [heater_bed] sections
## Fine tune E steps                                                            [extruder] section

## For more info                                                                check https://docs.vorondesign.com/build/startup/#v0
# See docs/Config_Reference.md for a description of parameters.

#[include mainsail.cfg]
[pause_resume]
[display_status]
[gcode_arcs] 

[mcu]
#####################################################################
# Obtain definition by "ls -l /dev/serial/by-id/"
#####################################################################
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_2E003C001751323133393639-if00
#restart_method: command

[mcu EBB]
canbus_uuid: 988028f6ee49
canbus_interface: can0

[mcu ERB]
canbus_uuid: c9cd56f0de99
canbus_interface: can0

[printer]
kinematics: corexy
max_velocity: 200
max_accel: 3000
max_z_velocity: 15
max_z_accel: 45
square_corner_velocity: 6.0

#####################################################################
#      X/Y Stepper Settings   X=B   Y=A
#####################################################################

[stepper_x]
step_pin: ERB:gpio16
## Refer to https://docs.vorondesign.com/build/startup/#v0
dir_pin: ERB:gpio15                                                      # Check motor direction in link above. If inverted, remove ! before PC13
enable_pin: !ERB:gpio14
rotation_distance: 40
microsteps: 32
full_steps_per_rotation: 200                                        # Set to 400 for 0.9 degree stepper motor, 200 is for 1.8 degree stepper motors
#endstop_pin: ^PA3
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_endstop: 140
position_max: 140
homing_speed: 40                                                    # for sensorless homing it is recommended not to go above 40mm/s   
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_x]
uart_pin: ERB:gpio17
interpolate: False
run_current: 0.7
hold_current: 0.4
sense_resistor: 0.110
stealthchop_threshold: 0                                            # Set to 999999 to turn stealthchop on, and 0 to use spreadcycle
diag_pin: ERB:gpio19                                                       # NO NEED TO JUMP 
driver_SGTHRS: 110                                                  # this is set to 255 which is the MAX sensitivity for sensorless homing, you will need to tune this later


[stepper_y]
step_pin: ERB:gpio10
## Refer to https://docs.vorondesign.com/build/startup/#v0
dir_pin: ERB:gpio9                                                       # Check motor direction in link above. If inverted, remove ! before PC1
enable_pin: !ERB:gpio8
rotation_distance: 40
microsteps: 32
full_steps_per_rotation: 200                                        # Set to 400 for 0.9�?degree stepper motor, 200 is for 1.8�?stepper motors
#endstop_pin: ^PA2
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_endstop: 128
position_max: 128
homing_speed: 40                                                    # for sensorless homing it is recommended not to go above 40mm/s   
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_y]
uart_pin: ERB:gpio11
interpolate: False
run_current: 0.7
hold_current: 0.4
sense_resistor: 0.110
stealthchop_threshold: 0                                            # Set to 999999 to turn stealthchop on, and 0 to use spreadcycle
diag_pin: ERB:gpio13                                                      # NO NEED TO JUMP  
driver_SGTHRS: 110                                                # this is set to 255 which is the MAX sensitivity for sensorless homing, you will need to tune this later


#####################################################################
#   Z Stepper Settings
#####################################################################

[stepper_z]
step_pin: PB2
dir_pin: !PC5	                                                    # Remove the ! before PB8 if motor direction is inverted.
enable_pin: !PB10
rotation_distance: 40                                                # For T8x8 lead screw
#rotation_distance: 2                                               # For T8x2 lead screw
microsteps: 32
endstop_pin: probe:z_virtual_endstop
position_max: 120
position_min: -10
homing_speed: 20
second_homing_speed: 5.0
homing_retract_dist: 5.0
homing_positive_dir:false

[tmc2209 stepper_z]
uart_pin: PC4
#tx_pin: PA2
#uart_address: 2
interpolate: False
# For FYSETC 42HSC1404B-200N8
run_current: 0.5
hold_current: 0.05
sense_resistor: 0.110
stealthchop_threshold: 0                                             # Set to 999999 to turn stealthchop on, and 0 to use spreadcycle

[stepper_z1]                                                        #FrontRight
step_pin: PC12
dir_pin: !PC10	                                                    # Remove the ! before PB8 if motor direction is inverted.
enable_pin: !PD2
rotation_distance: 40                                               # For T8x8 lead screw
#rotation_distance: 2                                               # For T8x2 lead screw
microsteps: 32

[tmc2209 stepper_z1]
uart_pin: PC11
#tx_pin: PA2
#uart_address: 2
interpolate: False
# For FYSETC 42HSC1404B-200N8
run_current: 0.5
hold_current: 0.05
sense_resistor: 0.110
stealthchop_threshold: 0                                             # Set to 999999 to turn stealthchop on, and 0 to use spreadcycle

[stepper_z2]                                                        #Front Left
step_pin: PC15
dir_pin: PC13                                                    # Remove the ! before PB8 if motor direction is inverted.
enable_pin: !PA10
rotation_distance: 40                                                # For T8x8 lead screw
#rotation_distance: 2                                               # For T8x2 lead screw
microsteps: 32

[tmc2209 stepper_z2]
uart_pin: PC14
#tx_pin: PA2
#uart_address: 2
interpolate: False
# For FYSETC 42HSC1404B-200N8
run_current: 0.5
hold_current: 0.05
sense_resistor: 0.110
stealthchop_threshold: 0                                             # Set to 999999 to turn stealthchop on, and 0 to use spreadcycle

#####################################################################
#   Extruder
#####################################################################

[extruder]
step_pin: EBB:PD0
dir_pin: !EBB:PD1	                # Add ! if moving opposite direction
enable_pin: !EBB:PD2
full_steps_per_rotation: 200    # Set to 200 for 1.8 degree motor, set to 400 for 0.9 degree stepper motor
rotation_distance: 65.6        # See calibrating rotation_distance on extruders doc
gear_ratio: 44:8, 37:17
microsteps: 32
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: EBB:PB13
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for NTC 100k 3950 thermistors
sensor_type: Generic 3950
sensor_pin: EBB:PA3
control: pid            # Do PID calibration
pid_Kp: 28.182
pid_Ki: 1.978
pid_Kd: 100.397
min_temp: 0
max_temp: 295
min_extrude_temp: 0
max_extrude_only_distance: 150
max_extrude_cross_section: 1.5
pressure_advance: 0.02   # See tuning pressure advance doc
pressure_advance_smooth_time: 0.040

[tmc2209 extruder]
uart_pin: EBB:PA15
#tx_pin: PA2
#uart_address: 3
interpolate: False
run_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0                                            # Set to 0 for spreadcycle, avoid using stealthchop on extruder


#####################################################################
#   Probe
#####################################################################
[probe]
pin: !EBB:PB6
x_offset: 0.0
y_offset: 0.0
z_offset: 0.0
speed: 5.0
samples: 1
sample_retract_dist: 5.0
samples_tolerance: 0.02
samples_tolerance_retries: 5
activate_gcode:
    G4 P500 ;Wait 200ms

#####################################################################
#   Filament switch sensor
#####################################################################

#[filament_switch_sensor my_sensor]
#pause_on_runout: True
#   When set to True, a PAUSE will execute immediately after a runout
#   is detected. Note that if pause_on_runout is False and the
#   runout_gcode is omitted then runout detection is disabled. Default
#   is True.
#runout_gcode: M300
#   A list of G-Code commands to execute after a filament runout is
#   detected. See docs/Command_Templates.md for G-Code format. If
#   pause_on_runout is set to True this G-Code will run after the
#   PAUSE is complete. The default is not to run any G-Code commands.
#insert_gcode:
#   A list of G-Code commands to execute after a filament insert is
#   detected. See docs/Command_Templates.md for G-Code format. The
#   default is not to run any G-Code commands, which disables insert
#   detection.
#event_delay: 3.0
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
#pause_delay: 0.5
#   The amount of time to delay, in seconds, between the pause command
#   dispatch and execution of the runout_gcode. It may be useful to
#   increase this delay if OctoPrint exhibits strange pause behavior.
#   Default is 0.5 seconds.
#switch_pin: ^PA2
#   The pin on which the switch is connected. This parameter must be
#   provided.



#####################################################################
#   Bed Heater
#####################################################################

[heater_bed]
heater_pin: PC8
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for Keenovo heaters
sensor_type: Generic 3950
sensor_pin: PB0
smooth_time: 3.0
#max_power: 0.6                                                      # Only needed for 100w pads
min_temp: 0
max_temp: 120
control: pid                                                         # Do PID calibration after initial checks
pid_kp: 68.453
pid_ki: 2.749
pid_kd: 426.122

#####################################################################
# Fan Control
#####################################################################

[heater_fan hotend_fan]
# FAN1 Connector
pin: EBB:PA1
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
#fan_speed: 1.0                                                      # You can't PWM the delta fan unless using blue wire

[fan]
# Print Cooling Fan: FAN0 Connector
pin: EBB:PA0
max_power: 1.0
kick_start_time: 0.5                                                 # Depending on your fan, you may need to increase this value if your fan will not start
off_below: 0.13
cycle_time: 0.010

[temperature_fan CM68_Fan]
pin: PA8
max_power: 1.0
min_temp: 10
max_temp: 100
kick_start_time: 0.5
off_below: 0.1
control: watermark
sensor_type: temperature_host
#fan_speed: 1.0 


#####################################################################
# Temperature Sensor
#####################################################################

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

#[temperature_sensor CM68]
#sensor_type: temperature_host
#min_temp: 10
#max_temp: 100

[temperature_sensor Chamber]
sensor_type: Generic 3950
sensor_pin: PA0
#min_temp:
#max_temp:
#   See the "extruder" section for the definition of the above
#   parameters.
#gcode_id:
#   See the "heater_generic" section for the definition of this
#   parameter.


#####################################################################
# Homing and Gantry Adjustment Routines
#####################################################################

#[homing_override]
#axes: z
#gcode:
#    G90
#    G0 Z10 F600
#    G28 X Y
#    G0 X70 Y64 F3600
#    G28 Z

# Homing override for Voron V0 with three Z steppers
[homing_override]
axes: xyz
set_position_x: 0  # Explicitly set X=0 before homing (optional, ensures clean state)
set_position_y: 0  # Explicitly set Y=0 before homing
set_position_z: 0  # Explicitly set Z=0 before homing
gcode:
    G90                   # Absolute positioning
    G0 Z10 F600          # Raise Z to safe height (10mm)
    G28 X Y              # Home X and Y normally
    G0 X70 Y64 F3600     # Move to bed center (X=60, Y=60 - 25 for probe y_offset)
    G28 Z                # Home Z using BLTouch probe
    Z_TILT_ADJUST        # Adjust gantry tilt using three Z steppers
    CENTER_TOOLHEAD      # Run macro to center toolhead (nozzle at X=60, Y=60)

[idle_timeout]
timeout: 1800

[z_tilt]
z_positions:
    70, 128   # Primary Z (rear motor)
    0, 0  # Second Z (left front motor)
    140, 0  # Third Z (right front)
points:
    70, 125  # Rear probe point
    20, 20   # Front-left probe point (adjust for probe offset)
    120, 20  # Front-right probe point
speed: 100
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.02

[bed_mesh]
speed: 120
horizontal_move_z: 5
mesh_min: 20, 20
mesh_max: 118, 100
probe_count: 3,3

# Center toolhead macro
[gcode_macro CENTER_TOOLHEAD]
description: Centers the toolhead (nozzle) on the Voron V0 bed
gcode:
    G90
    G0 Z10 F600
    G0 X70 Y64 F3600

#####################################################################
#   Simple V0 Display
#####################################################################

#[display]
#lcd_type: sh1106
#click_pin: ^!PA15
#i2c_bus: i2c1a
#i2c_mcu: mcu
#encoder_pins: ^PC1, ^PC2
#kill_pin: ^!PB12
#vcomh: 60
#x_offset: 2
#sda: pb9
#scl: pb8

#[neopixel display_led]
#pin: PC6
#color_order: GRB
#initial_RED: 0
#initial_GREEN: 0.1
#initial_BLUE: 0.4

[neopixel tool]
pin: EBB:PD3
chain_count: 3
color_order: GRBW
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.0
initial_WHITE: 0.0



#####################################################################
# Macros
#####################################################################
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
gcode:
    
    G28                            ; home all axes
    Z_TILT
    G90                            ; absolute positioning    
    G1 Z20 F3000                   ; move nozzle away from bed

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT


   
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
 
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    G91                            ; relative positioning                      


    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600    ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X0 F3600          ; park nozzle at rear
    M84


[gcode_macro LOAD_FILAMENT]
gcode:
   M109 T0 S210                   ; set extruder temp and wait 
   M83                            ; set extruder to relative
   G1 E30 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-40 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute


[virtual_sdcard]
path: /home/linaro/printer_data/gcodes/
#   The path of the local directory on the host machine to look for
#   g-code files. This is a read-only directory (sdcard file writes
#   are not supported). One may point this to OctoPrint's upload
#   directory (generally ~/.octoprint/uploads/ ). This parameter must
#   be provided.
#on_error_gcode:
#   A list of G-Code commands to execute when an error is reported.


#####################################################################
#   ADXL345
#####################################################################

[adxl345]
cs_pin: PA4
#   The SPI enable pin for the sensor. This parameter must be provided.
#spi_speed: 5000000
#   The SPI speed (in hz) to use when communicating with the chip.
#   The default is 5000000.
spi_bus: spi1
#spi_software_sclk_pin:
#spi_software_mosi_pin:
#spi_software_miso_pin:
#   See the "common SPI settings" section for a description of the
#   above parameters.
axes_map: -x, -z, y
#   The accelerometer axis for each of the printer's X, Y, and Z axes.
#   This may be useful if the accelerometer is mounted in an
#   orientation that does not match the printer orientation. For
#   example, one could set this to "y, x, z" to swap the X and Y axes.
#   It is also possible to negate an axis if the accelerometer
#   direction is reversed (eg, "x, z, -y"). The default is "x, y, z".
rate: 3200
#   Output data rate for ADXL345. ADXL345 supports the following data
#   rates: 3200, 1600, 800, 400, 200, 100, 50, and 25. Note that it is
#   not recommended to change this rate from the default 3200, and
#   rates below 800 will considerably affect the quality of resonance
#   measurements.

[resonance_tester]
accel_chip: adxl345
accel_per_hz: 75  # default is 75
probe_points:
    60, 60, 20  # an example

[input_shaper]
shaper_freq_x: 66
shaper_type_x: ei
shaper_freq_y: 70.8
shaper_type_y: mzv

#[menu __main __octoprint]
#type: disabled